require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe MinifiedLinksController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # MinifiedLink. As you add validations to MinifiedLink, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {original_url: 'http://www.sapo.pt'} }

  let(:invalid_attributes) { {original_url: ''} }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # MinifiedLinksController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET #goto_link" do
    it "redirects to stored url" do
      MinifiedLink.create! valid_attributes
      get :goto_link, params: {id: 'E8'}, session: valid_session
      expect(response).to redirect_to(MinifiedLink.last.original_url)
    end

    it "redirects to / when not found" do
      get :goto_link, params: {id: 'XPTO'}, session: valid_session
      expect(response).to redirect_to('/')
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new MinifiedLink" do
        expect {
          post :create, params: {minified_link: valid_attributes}, session: valid_session
        }.to change(MinifiedLink, :count).by(1)
      end

      it "redirects to the created minified_link" do
        post :create, params: {minified_link: valid_attributes}, session: valid_session
        expect(response).to redirect_to(root_path)
      end
    end
  end

end
